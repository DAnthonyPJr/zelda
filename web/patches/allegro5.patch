diff --git a/addons/audio/sdl_audio.c b/addons/audio/sdl_audio.c
index 777324259..636d7d381 100644
--- a/addons/audio/sdl_audio.c
+++ b/addons/audio/sdl_audio.c
@@ -76,8 +76,10 @@ static int sdl_allocate_voice(ALLEGRO_VOICE *voice)
    want.freq = voice->frequency;
    want.format = allegro_format_to_sdl(voice->depth);
    want.channels = al_get_channel_count(voice->chan_conf);
+   // The a5 SDL audio system hardcodes a value for # samples that is too high. Until I can upstream a patch to make this
+   // configurable, just manually change it here!
    // TODO: Should make this configurable somehow
-   want.samples = 4096;
+   want.samples = 512;
    want.callback = audio_callback;
    want.userdata = sv;
 
diff --git a/include/allegro5/platform/allegro_internal_sdl.h b/include/allegro5/platform/allegro_internal_sdl.h
index 61d42cd47..3eb68e4dd 100644
--- a/include/allegro5/platform/allegro_internal_sdl.h
+++ b/include/allegro5/platform/allegro_internal_sdl.h
@@ -50,3 +50,9 @@ void _al_sdl_event_hack(void);
 double _al_sdl_get_time(void);
 void _al_sdl_rest(double seconds);
 void _al_sdl_init_timeout(ALLEGRO_TIMEOUT *timeout, double seconds);
+
+typedef struct ALLEGRO_MOUSE_CURSOR_SDL ALLEGRO_MOUSE_CURSOR_SDL;
+struct ALLEGRO_MOUSE_CURSOR_SDL
+{
+   SDL_Cursor *cursor;
+};
diff --git a/src/sdl/sdl_display.c b/src/sdl/sdl_display.c
index e0af6d1ad..12fc8f14d 100644
--- a/src/sdl/sdl_display.c
+++ b/src/sdl/sdl_display.c
@@ -346,9 +346,10 @@ static bool sdl_is_compatible_bitmap(ALLEGRO_DISPLAY *display,
 static bool sdl_set_mouse_cursor(ALLEGRO_DISPLAY *display,
       ALLEGRO_MOUSE_CURSOR *cursor)
 {
+   ALLEGRO_MOUSE_CURSOR_SDL *sdl_cursor = (ALLEGRO_MOUSE_CURSOR_SDL *) cursor;
    (void)display;
-   (void)cursor;
-   return false;
+   SDL_SetCursor(sdl_cursor->cursor);
+   return true;
 }
 
 static bool sdl_set_system_mouse_cursor(ALLEGRO_DISPLAY *display,
diff --git a/src/sdl/sdl_system.c b/src/sdl/sdl_system.c
index 332c8b9d5..387a9375e 100644
--- a/src/sdl/sdl_system.c
+++ b/src/sdl/sdl_system.c
@@ -132,7 +132,8 @@ static void sdl_heartbeat(void)
 #ifdef __EMSCRIPTEN__
    double t = al_get_time();
    double interval = t - s->timer_time;
-   _al_timer_thread_handle_tick(interval);
+   // This emscripten-specific timer code actually really messes up the framerate, making it go way too fast.
+   // _al_timer_thread_handle_tick(interval);
    s->timer_time = t;
 #endif
    al_unlock_mutex(s->mutex);
@@ -292,6 +293,71 @@ static bool sdl_get_monitor_info(int adapter, ALLEGRO_MONITOR_INFO *info)
    return true;
 }
 
+static ALLEGRO_MOUSE_CURSOR* sdl_create_mouse_cursor(ALLEGRO_BITMAP *sprite, int xfocus, int yfocus)
+{
+   SDL_Cursor *cursor;
+   ALLEGRO_MOUSE_CURSOR_SDL *sdl_cursor;
+
+   int w = al_get_bitmap_width(sprite);
+   int h = al_get_bitmap_height(sprite);
+   int data_size = w * h * 4;
+
+   unsigned char* data = al_malloc(data_size * sizeof(data[0]));
+
+   Uint32 rmask, gmask, bmask, amask;
+#if SDL_BYTEORDER == SDL_BIG_ENDIAN
+   rmask = 0xff000000;
+   gmask = 0x00ff0000;
+   bmask = 0x0000ff00;
+   amask = 0x000000ff;
+#else // little endian, like x86
+   rmask = 0x000000ff;
+   gmask = 0x0000ff00;
+   bmask = 0x00ff0000;
+   amask = 0xff000000;
+#endif
+
+   ALLEGRO_LOCKED_REGION *lock = al_lock_bitmap(sprite, ALLEGRO_PIXEL_FORMAT_ABGR_8888, ALLEGRO_LOCK_READONLY);
+   if (lock) {
+      int i = 0, y = 0;
+      for (y = 0; y < h; y++) {
+         int x = 0;
+         for (x = 0; x < w; x++) {
+            ALLEGRO_COLOR c = al_get_pixel(sprite, x, y);
+            al_unmap_rgba(c, data+i, data+i+1, data+i+2, data+i+3);
+            i += 4;
+         }
+      }
+      al_unlock_bitmap(sprite);
+
+      SDL_Surface *icon = SDL_CreateRGBSurfaceFrom(data, w, h, 4 * 8, w * 4, rmask, gmask, bmask, amask);
+      cursor = SDL_CreateColorCursor(icon, xfocus, yfocus);
+      SDL_FreeSurface(icon);
+   }
+
+   al_free(data);
+   if (!cursor) {
+      return NULL;
+   }
+
+   sdl_cursor = al_malloc(sizeof *sdl_cursor);
+   if (!sdl_cursor) {
+      SDL_FreeCursor(cursor);
+      return NULL;
+   }
+
+   sdl_cursor->cursor = cursor;
+   return (ALLEGRO_MOUSE_CURSOR *)sdl_cursor;
+}
+
+static void sdl_destroy_mouse_cursor(ALLEGRO_MOUSE_CURSOR *cursor)
+{
+   ALLEGRO_MOUSE_CURSOR_SDL *sdl_cursor = (ALLEGRO_MOUSE_CURSOR_SDL *) cursor;
+   ASSERT(sdl_cursor);
+   SDL_FreeCursor(sdl_cursor->cursor);
+   al_free(sdl_cursor);
+}
+
 static int sdl_get_num_display_modes(void)
 {
    int i = al_get_new_display_adapter();
@@ -345,9 +411,9 @@ ALLEGRO_SYSTEM_INTERFACE *_al_sdl_system_driver(void)
    vt->shutdown_system = sdl_shutdown_system;
    vt->get_num_video_adapters = sdl_get_num_video_adapters;
    vt->get_monitor_info = sdl_get_monitor_info;
-   /*vt->create_mouse_cursor = sdl_create_mouse_cursor;
+   vt->create_mouse_cursor = sdl_create_mouse_cursor;
    vt->destroy_mouse_cursor = sdl_destroy_mouse_cursor;
-   vt->get_cursor_position = sdl_get_cursor_position;
+   /*vt->get_cursor_position = sdl_get_cursor_position;
    vt->grab_mouse = sdl_grab_mouse;
    vt->ungrab_mouse = sdl_ungrab_mouse;*/
    vt->get_path = sdl_get_path;
